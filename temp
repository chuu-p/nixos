~/g/nixos macho• ↑108 DEV❱ for file in *.nix; echo $file; cat $file; end
configuration.nix
{
  config,
  pkgs,
  ...
}: {
  imports = [
    <nixos-hardware/asus/zephyrus/ga401>
    ./hardware-configuration.nix
    ./g14.nix
  ];
}
flake.nix
{
  description = "g14";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs?ref=nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    home-manager,
  }: {
    nixosConfigurations.g14 = nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      modules = [
        ./configuration.nix
        home-manager.nixosModules.home-manager
        {
          home-manager.backupFileExtension = "hm-backup";
          home-manager.users.chuu = {
            home = {
              shellAliases = {
                l = "ls -alh";
                ll = "ls -l";
                ls = "ls --color=tty";
                kubectl = "sudo k3s kubectl";
                sudo = "sudo ";
                prettier = "npx prettier --write";
                g = "git";
                cg = "cargo";
                j = "just";
                zj = "zellij";
              };
            };
            imports = [
              ./home.nix # We'll create this file later
            ];
          };
        }
      ];
    };
  };
}
g14.nix
{
  config,
  pkgs,
  callPackage,
  ...
}: {
  imports = [
  ];

  hardware.nvidia.dynamicBoost.enable = false;

  hardware.bluetooth.enable = true;
  hardware.bluetooth.powerOnBoot = true;

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "g14"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  networking.networkmanager.enable = true;

  time.timeZone = "Europe/Berlin";
  i18n.defaultLocale = "en_US.UTF-8";
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "de_DE.UTF-8";
    LC_IDENTIFICATION = "de_DE.UTF-8";
    LC_MEASUREMENT = "de_DE.UTF-8";
    LC_MONETARY = "de_DE.UTF-8";
    LC_NAME = "de_DE.UTF-8";
    LC_NUMERIC = "de_DE.UTF-8";
    LC_PAPER = "de_DE.UTF-8";
    LC_TELEPHONE = "de_DE.UTF-8";
    LC_TIME = "de_DE.UTF-8";
  };

  services.xserver = {
    enable = true;
    xkb = {
      layout = "de";
      options = "caps:super";
    };
    videoDrivers = ["nvidia"];
    displayManager.lightdm = {
      enable = true;
      greeters.slick = {
        enable = true;
        draw-user-backgrounds = true;
      };
    };
    windowManager.i3 = {
      enable = true;
      extraPackages = with pkgs; [
        dmenu
        i3status
        i3lock
      ];
    };
  };

  location = {
    latitude = 50.9;
    longitude = 6.9;
  };

  services.redshift = {
    enable = true;

    temperature = {
      day = 5700;
      night = 3000;
    };

    # brightness = {
    #   day = "1";
    #   night = "0.5";
    # };
  };

  console.keyMap = "de";

  services.blueman.enable = true;

  services.picom.enable = true;

  services.printing.enable = true;

  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };

  users.users.chuu = {
    isNormalUser = true;
    description = "chuu";
    extraGroups = ["networkmanager" "wheel" "syncthing"];
    shell = pkgs.fish;
    packages = with pkgs; [
    ];
  };

  programs.fish.enable = true;

  programs.nix-ld.enable = true;

  programs.firefox.enable = true;

  nixpkgs.config.allowUnfree = true;

  fonts.packages = with pkgs; [
    nerd-fonts.noto
    nerd-fonts.dejavu-sans-mono
    nerd-fonts.symbols-only
    nerd-fonts.space-mono

    noto-fonts
    noto-fonts-cjk-sans
    noto-fonts-cjk-serif
    noto-fonts-emoji
  ];
  # fonts.fontDir = ["/home/chuu/.local/share/fonts"];

  environment.systemPackages = with pkgs; [
    # Editors/IDEs
    vim
    helix
    obsidian
    # jetbrains.rust-rover
    python314

    # Version Control
    git
    delta
    gh

    # Rust Development
    rustc
    rust-analyzer
    rustfmt
    cargo
    clippy
    diesel-cli
    koto
    koto-ls

    # C/C++ Development
    clang
    protobuf

    # Web Development
    wasm-bindgen-cli
    nodejs
    pnpm
    nodePackages.live-server

    # System/Utilities
    libxkbcommon
    alejandra
    neofetch
    alacritty
    kitty
    rio
    fish
    just
    sqlite
    sqlite.dev
    pkg-config
    zellij
    yazi
    appimage-run
    home-manager
    mullvad-vpn
    xsel
    brightnessctl
    cryptsetup
    xorg.xev
    libnotify
    unzip
    calibre
    flameshot
    tty-clock
    typst
    pandoc

    # Multimedia
    mpv
    pavucontrol
    transmission_4-qt
    mkvtoolnix-cli
    pulseaudio
    playerctl
    inkscape

    # Communication
    discord
    signal-desktop

    # Security
    keepassxc

    # Browsers
    chromium

    # Emulation
    bottles

    (vscode-with-extensions.override {
      vscode = vscodium;
      vscodeExtensions = with vscode-extensions;
        [
          jnoortheen.nix-ide
          rust-lang.rust-analyzer
          foam.foam-vscode
          bierner.emojisense
          ms-python.python
          tamasfe.even-better-toml
          zxh404.vscode-proto3
          bradlc.vscode-tailwindcss
          tomoki1207.pdf
        ]
        ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [
          {
            name = "doki-theme";
            publisher = "unthrottled";
            version = "88.1.15";
            sha256 = "ys3D84zg7mGGTG5Ey65gqgujbUJBsg27MC3qUnbluoM=";
          }
        ];
    })

    gnomeExtensions.unite
  ];

  programs.git = {
    enable = true;
    config = {
      init = {
        defautBranch = "macho";
      };
      alias = {
        a = "add";
        b = "branch";
        c = "commit";
        cfg = "config";
        chp = "cherry-pick";
        co = "checkout";
        cl = "clone";
        d = "diff";
        f = "fetch";
        graph = "log --graph";
        i = "init --template=";
        l = "log";
        last = "log -1";
        m = "merge";
        pl = "pull";
        ps = "push";
        r = "reset";
        rb = "rebase";
        re = "remote";
        rm = "remote";
        s = "status";
        wd = "diff --word-diff=color";
        dni = "diff --no-index";
        sw = "switch";
      };
      core = {
        pager = "delta";
      };
      interactive = {
        diffFilter = "delta --color-only";
      };
      delta = {
        navigate = "true";
        dark = "true";
        line-numbers = "true";
        options = {
          syntax-theme = "ansi"; # Replace with your chosen theme
        };
      };
      merge = {
        conflictstyle = "zdiff3";
      };
    };
  };

  services.logind = {
    lidSwitch = "suspend-then-hibernate";
    lidSwitchExternalPower = "ignore";

    extraConfig = ''
      # don’t shutdown when power button is short-pressed
      HandlePowerKey=ignore
    '';
  };

  systemd.sleep.extraConfig = ''
    HibernateDelaySec=30min
  '';

  services.syncthing = {
    enable = true;
    openDefaultPorts = true;
    group = "users";
    user = "chuu";
    dataDir = "/home/chuu/sync"; # Default folder for new synced folders
    configDir = "/home/chuu/sync/.config/syncthing";
    overrideDevices = true; # overrides any devices added or deleted through the WebUI
    overrideFolders = true; # overrides any folders added or deleted through the WebUI
  };

  services.mullvad-vpn.enable = true;
  services.mullvad-vpn.package = pkgs.mullvad-vpn;

  system.autoUpgrade = {
    enable = true;
    randomizedDelaySec = "30min"; # Adds a random delay to prevent simultaneous updates
    dates = "daily"; # or "weekly", "monthly", etc.
    flags = ["--impure" "--flake" "/etc/nixos"];
    allowReboot = true; # Allow the system to reboot if necessary
    # email = "your-email@example.com"; # Uncomment to receive email notifications
    # emailOnFailure = true;
  };

  nix.settings.experimental-features = ["nix-command" "flakes"];

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  system.stateVersion = "24.11";
}
hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "usbhid"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/cd4f1e15-273f-46f7-9c04-969a7ea0d018";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/1B11-A402";
    fsType = "vfat";
    options = ["fmask=0077" "dmask=0077"];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/2abf0566-55ba-401c-8d6e-6e6e8fe9273d";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
home.nix
{
  config,
  pkgs,
  ...
}: {
  home.username = "chuu"; # Replace with your username
  home.homeDirectory = "/home/chuu"; # Replace with your home directory
  home.stateVersion = "24.05"; # Please read the comment before changing.

  home.packages = with pkgs; [
    kitty
    dconf
  ];

  dconf = {
    enable = true;
    settings = {
      "org/gnome/desktop/interface" = {
        color-scheme = "prefer-dark";
      };
    };
  };

  gtk = {
    enable = true;
    theme = {
      name = "orchis-theme";
      package = pkgs.orchis-theme;
    };
    iconTheme = {
      name = "Adwaita";
      package = pkgs.adwaita-icon-theme;
    };
    cursorTheme = {
      name = "Adwaita";
      package = pkgs.adwaita-icon-theme;
    };
  };

  home.sessionVariables = {
    EDITOR = "hx";
  };
  home.sessionPath = ["${config.home.homeDirectory}/git/nixos/PATH"];

  programs.fish = {
    enable = true;
    interactiveShellInit = ''
      set fish_greeting # Disable greeting
    '';
    functions = {
      y = ''
        set tmp (mktemp -t "yazi-cwd.XXXXXX")
        yazi $argv --cwd-file="$tmp"
        if set cwd (command cat -- "$tmp"); and [ -n "$cwd" ]; and [ "$cwd" != "$PWD" ]
          builtin cd -- "$cwd"
        end
        rm -f -- "$tmp"
      '';
    };
    plugins = [
      {
        name = "done";
        src = pkgs.fishPlugins.done.src;
      }
      {
        name = "hydro";
        src = pkgs.fishPlugins.hydro.src;
      }
    ];
  };

  programs.git = {
    enable = true;
    userName = "chuu-p";
    userEmail = "chuu801@pm.me";
    extraConfig = {
      alias = {
        a = "add";
        b = "branch";
        c = "commit";
        cfg = "config";
        chp = "cherry-pick";
        co = "checkout";
        d = "diff";
        f = "fetch";
        graph = "log --graph";
        i = "init --template=";
        l = "log";
        last = "log -1";
        m = "merge";
        pl = "pull";
        ps = "push";
        r = "reset";
        rb = "rebase";
        re = "remote";
        rm = "remote";
        s = "status";
        wd = "diff --word-diff=color";
        sw = "switch";
      };
    };
  };

  programs.kitty = {
    enable = true;
    extraConfig = builtins.readFile ./themes/ene.conf;
  };

  programs.zellij = {
    enable = true;
    settings = {
      theme = "gruvbox-dark";
      themes.gruvbox-dark = {
        fg = "#d5c4a1";
        bg = "#282828";
        black = "#3C3836";
        red = "#CC241D";
        green = "#98971A";
        yellow = "#D79921";
        blue = "#3C8588";
        magenta = "#B16286";
        cyan = "#689D6A";
        white = "#ebdbb2";
        orange = "#D65D0E";
      };
      pane_frames = false;
    };
  };

  programs.obs-studio = {
    enable = true;
    plugins = with pkgs.obs-studio-plugins; [
      wlrobs
      obs-backgroundremoval
      obs-pipewire-audio-capture
    ];
  };

  xsession.windowManager.i3 = {
    enable = true;
    config = {
      modifier = "Mod4";
      # TODO
      startup = [
        {command = "exec discord --start-minimized";}
        {command = "exec keepassxc";}
        {command = "exec flameshot";}
        {command = "exec mullvad-gui";}
      ];

      bars = [
        {
          position = "top";
          statusCommand = "i3status -c ~/git/nixos/i3status.conf";
          # trayOutput = "DP-2"; # Make sure this matches your desired output
          # font = "pango:Cousine 11"; # Ensure this font is availabl
          fonts = {
            names = ["Space Mono"];
            style = "Regular";
            size = 10.0;
          };
        }
      ];

      # FIXME
      # settings = {
      #   # focusFollowsMouse = false;
      #   defaultBorder = "normal 2";
      #   defaultFloatingBorder = "normal 2";
      #   hideEdgeBorders = "both";
      #   workspaceLayout = "tabbed";
      # };
      # TODO
      # - [ ] modes
      # - [ ] bar
      # - [ ] initialization
      # - [ ] pavucontrol always floating
      # - [ ] default app -> pdf chromium
      # - [ ] default app -> feh image viewer
      # - [ ] lol cursor set
      keybindings = import ./i3-keybindings.nix "Mod4";
      # modes = import ./i3-modes.nix "Mod4";

      # FIXME this does not work
      # forWindow = [
      #   {
      #     title = "^Volume Control$";
      #     floating = true;
      #   }
      # ];
    };
  };

  programs.yazi = {
    enable = true;
    theme = builtins.fromTOML (builtins.readFile ./themes/yazi-catppuccin-mocha.toml);
  };

  programs.helix = {
    enable = true;
    settings = {
      theme = "term16_dark";
      # globally enable inlay-hints for all languages
      editor.lsp.display-messages = true;
      editor.lsp.display-inlay-hints = true;
    };
    languages.language = [
      {
        name = "nix";
        auto-format = true;
        formatter.command = "${pkgs.alejandra}/bin/alejandra";
      }
    ];
  };

  services.dunst.enable = true;

  # programs.dconf.enable = true;

  # gtk = {
  #   enable = true;
  #   theme.name = "Adwaita-dark"; # Or any dark theme you prefer
  #   theme.package = pkgs.gnome-themes-extra;
  # };
}
i3-keybindings.nix
mod: {
  "${mod}+t" = "exec kitty";
  "${mod}+Return" = "exec kitty";
  "${mod}+Shift+Return" = "exec kitty yazi";

  "${mod}+Shift+q" = "kill";
  "${mod}+Shift+d" = "exec i3-dmenu-desktop";
  "${mod}+d" = "exec dmenu_run";

  # TODO "${mod}+l" = "exec xautolock -locknow";

  "${mod}+Left" = "focus left";
  "${mod}+Down" = "focus down";
  "${mod}+Up" = "focus up";
  "${mod}+Right" = "focus right";
  "${mod}+Shift+f" = "[urgent=latest] focus";

  "${mod}+Shift+Left" = "move left";
  "${mod}+Shift+Down" = "move down";
  "${mod}+Shift+Up" = "move up";
  "${mod}+Shift+Right" = "move right";

  "${mod}+h" = "split h";
  "${mod}+v" = "split v";
  "${mod}+f" = "fullscreen toggle";

  "${mod}+s" = "layout stacking";
  "${mod}+w" = "layout tabbed";
  "${mod}+e" = "layout toggle split";

  # TODO "floating modifier $mod"

  "${mod}+Shift+space" = "floating toggle";
  # "${mod}+Shift+a" = "mode_toggle";

  "${mod}+a" = "focus parent";
  "${mod}+Shift+a" = "focus child";

  "${mod}+Shift+c" = "reload";
  "${mod}+Shift+r" = "restart";

  "Print" = "exec flameshot launcher";

  "XF86AudioRaiseVolume" = "exec pactl set-sink-volume @DEFAULT_SINK@ +10%";
  "XF86AudioLowerVolume" = "exec pactl set-sink-volume @DEFAULT_SINK@ -10%";
  # TODO mute mic button

  "XF86MonBrightnessUp" = "exec brightnessctl set +10%";
  "XF86MonBrightnessDown" = "exec brightnessctl set 10%-";

  # TODO FIXME XF86PowerOff
  "XF86Launch1" = "exec systemctl suspend-then-hibernate";
  "Mod1+XF86Launch1" = "exec systemctl hibernate";
  "Shift+XF86Launch1" = "exec systemctl poweroff";
  "Control+XF86Launch1" = "exec systemctl reboot";

  "${mod}+1" = "workspace 1";
  "${mod}+2" = "workspace 2";
  "${mod}+3" = "workspace 3";
  "${mod}+4" = "workspace 4";
  "${mod}+5" = "workspace 5";
  "${mod}+6" = "workspace 6";
  "${mod}+7" = "workspace 7";
  "${mod}+8" = "workspace 8";
  "${mod}+9" = "workspace 9";
  "${mod}+0" = "workspace 10";
  "${mod}+Shift+1" = "move container to workspace 1";
  "${mod}+Shift+2" = "move container to workspace 2";
  "${mod}+Shift+3" = "move container to workspace 3";
  "${mod}+Shift+4" = "move container to workspace 4";
  "${mod}+Shift+5" = "move container to workspace 5";
  "${mod}+Shift+6" = "move container to workspace 6";
  "${mod}+Shift+7" = "move container to workspace 7";
  "${mod}+Shift+8" = "move container to workspace 8";
  "${mod}+Shift+9" = "move container to workspace 9";
  "${mod}+Shift+0" = "move container to workspace 10";

  # TODO
  # - [ ] modes
  # - [ ] bar
  # - [ ] initialization
}
i3-modes.nix
mod: {
  "workspace" = {
    "Left" = "workspace prev";
    "Right" = "workspace next";

    "Shift+Left" = "move container to workspace prev, workspace prev";
    "Shift+Right" = "move container to workspace next, workspace next";

    "Mod1+Left" = "move workspace to output left";
    "Mod1+Right" = "move workspace to output right";

    "Escape" = "mode default";
    "${mod}+Shift+w" = "mode default";
  };
  "resize" = {
    "Mod1+Left" = "resize shrink width 10 px or 5 ppt";
    "Mod1+Down" = "resize grow height 10 px or 5 ppt";
    "Mod1+Up" = "resize shrink height 10 px or 5 ppt";
    "Mod1+Right" = "resize grow width 10 px or 5 ppt";

    "Left" = "resize shrink width 100 px or 10 ppt";
    "Down" = "resize grow height 100 px or 10 ppt";
    "Up" = "resize shrink height 100 px or 10 ppt";
    "Right" = "resize grow width 100 px or 10 ppt";

    "Shift+Left" = "resize shrink width 250 px or 20 ppt";
    "Shift+Down" = "resize grow height 250 px or 20 ppt";
    "Shift+Up" = "resize shrink height 250 px or 20 ppt";
    "Shift+Right" = "resize grow width 250 px or 20 ppt";

    "c" = "move position center";

    "m" = "mode move";
    "Return" = "mode default";
    "Escape" = "mode default";
    "${mod}+r" = "mode default";
  };
  "move" = {
    "Mod1+Left" = "move left 10";
    "Mod1+Down" = "move down 10";
    "Mod1+Up" = "move up 10";
    "Mod1+Right" = "move right 10";

    "Left" = "move left 100";
    "Down" = "move down 100";
    "Up" = "move up 100";
    "Right" = "move right 100";

    "Shift+Left" = "move left 250";
    "Shift+Down" = "move down 250";
    "Shift+Up" = "move up 250";
    "Shift+Right" = "move right 250";

    "c" = "move position center";

    "r" = "mode resize";
    "Return" = "mode default";
    "Escape" = "mode default";
    "${mod}+m" = "mode default";
  };
  "nokeys" = {
    "${mod}+Escape" = "mode default";
  };
  "mouse" = {
    "Mod1+Left" = "exec --no-startup-id xdotool mousemove_relative -- -16 0";
    "Mod1+Down" = "exec --no-startup-id xdotool mousemove_relative -- 0 16";
    "Mod1+Up" = "exec --no-startup-id xdotool mousemove_relative -- 0 -16";
    "Mod1+Right" = "exec --no-startup-id xdotool mousemove_relative -- 16 0";

    "Left" = "exec --no-startup-id xdotool mousemove_relative -- -128 0";
    "Down" = "exec --no-startup-id xdotool mousemove_relative -- 0 128";
    "Up" = "exec --no-startup-id xdotool mousemove_relative -- 0 -128";
    "Right" = "exec --no-startup-id xdotool mousemove_relative -- 128 0";

    "Shift+Left" = "exec --no-startup-id xdotool mousemove_relative -- -256 0";
    "Shift+Down" = "exec --no-startup-id xdotool mousemove_relative -- 0 256";
    "Shift+Up" = "exec --no-startup-id xdotool mousemove_relative -- 0 -256";
    "Shift+Right" = "exec --no-startup-id xdotool mousemove_relative -- 256 0";

    "Control+Left" = "exec --no-startup-id xdotool mousemove_relative -- -512 0";
    "Control+Down" = "exec --no-startup-id xdotool mousemove_relative -- 0 512";
    "Control+Up" = "exec --no-startup-id xdotool mousemove_relative -- 0 -512";
    "Control+Right" = "exec --no-startup-id xdotool mousemove_relative -- 512 0";

    "Return" = "exec --no-startup-id xdotool click 1";
    "Mod1+Return" = "exec --no-startup-id xdotool click 2";
    "Shift+Return" = "exec --no-startup-id xdotool click 3";

    "q" = "exec --no-startup-id xdotool mousedown 1";
    "e" = "exec --no-startup-id xdotool mouseup 1";

    "${mod}+q" = "mode default";
    "Escape" = "mode default";
  };
}
